{"entries":[{"timestamp":1743731473356,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"let sonar = 0\nbasic.forever(function on_forever() {\n    \n    sonar = CutebotPro.ultrasonic(SonarUnit.Centimeters)\n    console.log(sonar)\n    if (sonar > 10) {\n        CutebotPro.pwmCruiseControl(10, 10)\n    } else {\n        CutebotPro.pwmCruiseControl(10, 10)\n    }\n    \n})"],[0,"\n"]],"start1":0,"start2":0,"length1":274,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v2.1.0\""],[0,"\n   "]],"start1":150,"start2":150,"length1":78,"length2":8},{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":234,"start2":234,"length1":64,"length2":44}]},{"type":"added","filename":"main.py","value":"sonar = 0\n\ndef on_forever():\n    global sonar\n    sonar=CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n    print(sonar)\n\n    if sonar > 10:\n        CutebotPro.pwm_cruise_control(10, 10)\n    else:\n        \n\nbasic.forever(on_forever)\n"}]},{"timestamp":1743732069120,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"= 0\n"],[-1,"function check_distance(): number {\n    return CutebotPro.ultrasonic(SonarUnit.Centimeters)\n}\n\nbasic.forever(function on_forever() {\n    let left: number;\n    let right: number;\n    \n    sonar = check_distance("],[1,"basic.forever(function on_forever() {\n    \n    sonar = CutebotPro.ultrasonic(SonarUnit.Centimeters"],[0,")\n  "]],"start1":10,"start2":10,"length1":218,"length2":106},{"diffs":[[0,") {\n"],[-1,"        // go forward\n"],[0,"    "]],"start1":155,"start2":155,"length1":30,"length2":8},{"diffs":[[0,"    "],[-1,"// stop check for dead end\n        CutebotPro.pwmCruiseControl(0, 0)\n        basic.pause(500)\n        // turn left and check\n        CutebotPro.trolleySteering(CutebotProTurn.LeftInPlace, CutebotProAngle.Angle90)\n        basic.pause(500)\n        left = check_distance()\n        console.log(left)\n        // turn right twice to check right\n        CutebotPro.trolleySteering(CutebotProTurn.RightInPlace, CutebotProAngle.Angle180)\n        basic.pause(500)\n        right = check_distance()\n        console.log(right)\n        // return to original direction\n        CutebotPro.trolleySteering(CutebotProTurn.LeftInPlace, CutebotProAngle.Angle90)\n        basic.pause(500)\n        // decision time\n        if (left > 10) {\n            CutebotPro.trolleySteering(CutebotProTurn.LeftInPlace, CutebotProAngle.Angle90)\n        } else if (right > 10) {\n            CutebotPro.trolleySteering(CutebotProTurn.RightInPlace, CutebotProAngle.Angle90)\n        } else {\n            // dead end. Back up and turn back\n            CutebotPro.pwmCruiseControl(-10, -10)\n            basic.pause(1000)\n            CutebotPro.trolleySteering(CutebotProTurn.LeftInPlace, CutebotProAngle.Angle180)\n        }\n        "],[1,"CutebotPro.pwmCruiseControl(10, 10)"],[0,"\n   "]],"start1":220,"start2":220,"length1":1198,"length2":43}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"def "],[-1,"check_distance():\n    return "],[1,"on_forever():\n    global sonar\n    sonar="],[0,"Cute"]],"start1":11,"start2":11,"length1":37,"length2":49},{"diffs":[[0,"ERS)"],[-1,"\n\ndef on_forever():\n    global sonar\n    sonar = check_distance()"],[0,"\n   "]],"start1":96,"start2":96,"length1":73,"length2":8},{"diffs":[[0,"10:\n"],[-1,"        #go forward\n"],[0,"    "]],"start1":134,"start2":134,"length1":28,"length2":8},{"diffs":[[0,"    "],[-1,"#stop check for dead end\n        CutebotPro.pwm_cruise_control(0, 0)\n        basic.pause(500)\n\n        #turn left and check\n        CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE90)\n        basic.pause(500)\n        left = check_distance()\n        print(left)\n\n        #turn right twice to check right\n        CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE180)\n        basic.pause(500)\n        right = check_distance()\n        print(right)\n\n        #return to original direction\n        CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE90)\n        basic.pause(500)\n\n        #decision time\n        if left > 10:\n            CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE90)\n        elif right > 10:\n            CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE90)\n        else:\n            #dead end. Back up and turn back\n            CutebotPro.pwm_cruise_control(-10, -10)\n            basic.pause(1000)\n            CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE180)"],[0,"\n\nba"]],"start1":198,"start2":198,"length1":1167,"length2":8}]}]},{"timestamp":1743732400030,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"sonar > "],[-1,"5"],[1,"10"],[0,":\n      "]],"start1":179,"start2":179,"length1":17,"length2":18}]}]},{"timestamp":1744043021986,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"sonar > "],[-1,"5"],[1,"10"],[0,") {\n    "]],"start1":257,"start2":257,"length1":17,"length2":18}]}]},{"timestamp":1744043022160,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ght "],[1,"twice "],[0,"to check"],[1," right"],[0,"\n   "]],"start1":671,"start2":671,"length1":16,"length2":28},{"diffs":[[0,"otProAngle.Angle"],[-1,"9"],[1,"18"],[0,"0)\n        basic"]],"start1":765,"start2":765,"length1":33,"length2":34},{"diffs":[[0,"decision"],[1," time"],[0,"\n       "]],"start1":1035,"start2":1035,"length1":16,"length2":21},{"diffs":[[0," if (left > "],[-1,"5"],[1,"10"],[0,") {\n        "]],"start1":1056,"start2":1056,"length1":25,"length2":26},{"diffs":[[0,"right > "],[-1,"5"],[1,"10"],[0,") {\n    "]],"start1":1185,"start2":1185,"length1":17,"length2":18}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"ght "],[1,"twice "],[0,"to check"],[1," right"],[0,"\n   "]],"start1":583,"start2":583,"length1":16,"length2":28},{"diffs":[[0,"otProAngle.ANGLE"],[-1,"9"],[1,"18"],[0,"0)\n        basic"]],"start1":680,"start2":680,"length1":33,"length2":34},{"diffs":[[0,"decision"],[1," time"],[0,"\n       "]],"start1":945,"start2":945,"length1":16,"length2":21},{"diffs":[[0,"  if left > "],[-1,"5"],[1,"10"],[0,":\n          "]],"start1":965,"start2":965,"length1":25,"length2":26},{"diffs":[[0,"right > "],[-1,"5"],[1,"10"],[0,":\n      "]],"start1":1089,"start2":1089,"length1":17,"length2":18}]}]},{"timestamp":1744043246722,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"GLE9"],[-1,"4.5"],[1,"0"],[0,")\n  "]],"start1":482,"start2":482,"length1":11,"length2":9}]}]},{"timestamp":1744045780644,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,".ANGLE94"],[1,".5"],[0,")\n      "]],"start1":479,"start2":479,"length1":16,"length2":18}]}]},{"timestamp":1744045782635,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"tProAngle.ANGLE9"],[-1,"5"],[1,"4"],[0,")\n        basic."]],"start1":470,"start2":470,"length1":33,"length2":33},{"diffs":[[0,"e.ANGLE9"],[-1,"5"],[1,"0"],[0,")\n      "]],"start1":677,"start2":677,"length1":17,"length2":17}]}]},{"timestamp":1744045785905,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"tProAngle.ANGLE9"],[-1,"0"],[1,"5"],[0,")\n        basic."]],"start1":470,"start2":470,"length1":33,"length2":33}]}]},{"timestamp":1744046681158,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"tProAngle.ANGLE9"],[-1,"0"],[1,"5"],[0,")\n        basic."]],"start1":669,"start2":669,"length1":33,"length2":33}]}]},{"timestamp":1744046685173,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"= 0\n"],[-1,"let maze_directions = []\n// left wall following\n"],[0,"func"]],"start1":10,"start2":10,"length1":56,"length2":8},{"diffs":[[0,"Pro."],[-1,"distanceRunning(CutebotProOrientation.Advance, 16, CutebotProDistanceUnits.Cm"],[1,"pwmCruiseControl(10, 10"],[0,")\n  "]],"start1":307,"start2":307,"length1":85,"length2":31}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"#after finding magnet, in should enter the maze and travel half of the grid distance:\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 16, CutebotProDistanceUnits.CM)\n\nsonar = 0\nmaze_directions=[]\n#left wall following"],[1,"sonar = 0"],[0,"\n\nde"]],"start1":0,"start2":0,"length1":231,"length2":13},{"diffs":[[0,"    "],[-1,"CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30, CutebotProDistanceUnits.CM)\n"],[1,"    #go forward\n        CutebotPro.pwm_cruise_control(10, 10)"],[0,"\n   "]],"start1":190,"start2":190,"length1":99,"length2":69}]}]},{"timestamp":1744047284115,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"// after finding magnet, in should enter the maze and travel half of the grid distance:\nCutebotPro.distanceRunning(CutebotProOrientation.Advance, 16, CutebotProDistanceUnits.Cm)\nlet sonar = 0\nlet list"],[1,"let sonar = 0\nlet maze_directions"],[0," = ["]],"start1":0,"start2":0,"length1":204,"length2":37},{"diffs":[[0,"number;\n"],[1,"    let right: number;\n"],[0,"    \n   "]],"start1":209,"start2":209,"length1":16,"length2":39},{"diffs":[[0,"onar > 5) {\n"],[1,"        // go forward\n"],[0,"        Cute"]],"start1":306,"start2":306,"length1":24,"length2":46},{"diffs":[[0,"tation.Advance, "],[-1,"30"],[1,"16"],[0,", CutebotProDist"]],"start1":390,"start2":390,"length1":34,"length2":34},{"diffs":[[0,"    "],[-1,"    list.push(1)\n    } else if (sonar < 5) {"],[1,"} else {\n        // stop check for dead end\n        CutebotPro.pwmCruiseControl(0, 0)"],[0,"\n   "]],"start1":438,"start2":438,"length1":52,"length2":93},{"diffs":[[0,"    "],[-1,"CutebotPro.distanceRunning(CutebotProOrientation.Advance, 30, CutebotProDistanceUnits.Cm"],[1,"// turn right to check\n        CutebotPro.trolleySteering(CutebotProTurn.RightInPlace, CutebotProAngle.Angle90)\n        basic.pause(500)\n        right = check_distance()\n        console.log(right)\n        // return to original direction\n        CutebotPro.trolleySteering(CutebotProTurn.LeftInPlace, CutebotProAngle.Angle90"],[0,")\n  "]],"start1":759,"start2":759,"length1":96,"length2":331},{"diffs":[[0,"    "],[-1,"list"],[1,"basic"],[0,".p"],[1,"a"],[0,"us"],[-1,"h(2"],[1,"e(500"],[0,")\n  "]],"start1":1092,"start2":1092,"length1":19,"length2":23},{"diffs":[[0," // "],[-1,"append 2 to the list if it is going to the left\n"],[1,"decision\n        if (left > 5) {\n            CutebotPro.trolleySteering(CutebotProTurn.LeftInPlace, CutebotProAngle.Angle90)\n        } else if (right > 5) {\n            CutebotPro.trolleySteering(CutebotProTurn.RightInPlace, CutebotProAngle.Angle90)\n        } else {\n            // dead end. Back up and turn back\n            CutebotPro.pwmCruiseControl(-10, -10)\n    "],[0,"    "]],"start1":1120,"start2":1120,"length1":56,"length2":376},{"diffs":[[0,"basic.pause("],[-1,"5"],[1,"10"],[0,"00)\n"],[1,"            CutebotPro.trolleySteering(CutebotProTurn.LeftInPlace, CutebotProAngle.Angle180)\n        }\n        \n"],[0,"    }\n    \n}"]],"start1":1500,"start2":1500,"length1":29,"length2":142}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"nar = 0\n"],[-1,"list"],[1,"maze_directions"],[0,"=[]\n#lef"]],"start1":180,"start2":180,"length1":20,"length2":31},{"diffs":[[0,"   sonar"],[-1,"="],[1," = "],[0,"check_di"]],"start1":344,"start2":344,"length1":17,"length2":19},{"diffs":[[0,"onar"],[-1,">5:\n    "],[1," > 5:\n"],[0,"    "]],"start1":398,"start2":398,"length1":16,"length2":14},{"diffs":[[0,"CM)\n"],[-1,"        list.append(1) #append 1 to the list if it is going straight \n    else:\n        if sonar<5:\n  "],[1,"\n    else:\n        #stop check for dead end\n        CutebotPro.pwm_cruise_control(0, 0)\n"],[0,"        "],[-1,"  "],[0,"basi"]],"start1":499,"start2":499,"length1":120,"length2":104},{"diffs":[[0,"asic.pause(500)\n"],[-1,"    "],[1,"\n"],[0,"        #turn le"]],"start1":600,"start2":600,"length1":36,"length2":33},{"diffs":[[0,"d check\n"],[-1,"    "],[0,"        "]],"start1":638,"start2":638,"length1":20,"length2":16},{"diffs":[[0,"NGLE90)\n        "],[-1,"    "],[0,"basic.pause(500)"]],"start1":729,"start2":729,"length1":36,"length2":32},{"diffs":[[0,"        "],[-1," "],[-1,"   "],[0,"left = c"]],"start1":762,"start2":762,"length1":20,"length2":16},{"diffs":[[0,"        "],[-1,"    "],[0,"print(le"]],"start1":794,"start2":794,"length1":20,"length2":16},{"diffs":[[0,"t(left)\n"],[1,"\n"],[0,"    "],[1,"    #turn right to check\n"],[0,"        "]],"start1":806,"start2":806,"length1":20,"length2":46},{"diffs":[[0," CutebotPro."],[-1,"distance_runn"],[1,"trolley_steer"],[0,"ing(CutebotP"]],"start1":851,"start2":851,"length1":37,"length2":37},{"diffs":[[0,"tPro"],[-1,"Orientation.ADVANCE, 30, CutebotProDistanceUnits.CM)\n            list.append(2) #append 2 to the list if it is going to the left"],[1,"Turn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE90)\n        basic.pause(500)\n        right = check_distance()\n        print(right)\n\n        #return to original direction\n        CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE90)\n        basic.pause(500)\n\n        #decision\n        if left > 5:\n            CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE90)\n        elif right > 5:\n            CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE90)\n        else:\n            #dead end. Back up and turn back\n            CutebotPro.pwm_cruise_control(-10, -10)"],[0,"\n   "]],"start1":886,"start2":886,"length1":136,"length2":653},{"diffs":[[0,"    basic.pause("],[-1,"5"],[1,"10"],[0,"00)\n            "]],"start1":1544,"start2":1544,"length1":33,"length2":34},{"diffs":[[0,"        "],[1,"CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE180)\n"],[0,"\nbasic.f"]],"start1":1570,"start2":1570,"length1":16,"length2":100}]}]},{"timestamp":1744047878478,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[1,"#after finding magnet, in should enter the maze and travel half of the grid distance:\n"],[0,"CutebotPro.distance_running("]],"start1":0,"start2":0,"length1":28,"length2":114},{"diffs":[[0,"ts.CM)\n\n"],[-1,"let "],[0,"sonar = "]],"start1":170,"start2":170,"length1":20,"length2":16},{"diffs":[[0," 0\nl"],[-1,"et list: number[] = []  // ✅ Explicitly typed list\n\n// "],[1,"ist=[]\n#"],[0,"left"]],"start1":185,"start2":185,"length1":63,"length2":16},{"diffs":[[0,"llowing\n"],[-1,"function"],[1,"\ndef"],[0," check_d"]],"start1":209,"start2":209,"length1":24,"length2":20},{"diffs":[[0,"stance()"],[-1," {"],[1,":"],[0,"\n    ret"]],"start1":230,"start2":230,"length1":18,"length2":17},{"diffs":[[0,"RS)\n"],[-1,"}\n\nfunction"],[1,"\ndef"],[0," on_"]],"start1":292,"start2":292,"length1":19,"length2":12},{"diffs":[[0,"er()"],[-1," {"],[1,":"],[0,"\n    "],[-1,"sonar = check_distance()\n    console.logValue(\"Sonar\", "],[1,"global sonar\n    sonar=check_distance()\n    print("],[0,"sona"]],"start1":309,"start2":309,"length1":70,"length2":64},{"diffs":[[0," if "],[-1,"("],[0,"sonar"],[-1," > 5) {"],[1,">5:"],[0,"\n   "]],"start1":380,"start2":380,"length1":21,"length2":16},{"diffs":[[0,"ist."],[-1,"push(1)  // G"],[1,"append(1) #append 1 to the list if it is g"],[0,"oing"]],"start1":501,"start2":501,"length1":21,"length2":50},{"diffs":[[0,"ight"],[1," "],[0,"\n   "],[-1," }"],[0," else"],[-1," {"],[1,":"],[0,"\n   "]],"start1":556,"start2":556,"length1":21,"length2":19},{"diffs":[[0," if "],[-1,"("],[0,"sonar"],[-1," < 5) {"],[1,"<5:"],[0,"\n   "]],"start1":579,"start2":579,"length1":21,"length2":16},{"diffs":[[0,"        "],[-1,"// "],[1,"#"],[0,"turn lef"]],"start1":625,"start2":625,"length1":19,"length2":17},{"diffs":[[0,"    "],[-1,"let "],[0,"left"]],"start1":786,"start2":786,"length1":12,"length2":8},{"diffs":[[0,"    "],[-1,"console.logValue(\"Left\", "],[1,"print("],[0,"left"]],"start1":822,"start2":822,"length1":33,"length2":14},{"diffs":[[0,"ist."],[-1,"push(2)  // Going"],[1,"append(2) #append 2 to the list if it is going to the"],[0," lef"]],"start1":954,"start2":954,"length1":25,"length2":61},{"diffs":[[0,"    "],[-1,"}\n"],[0,"    "],[-1,"}\n}\n"],[0,"\nbas"]],"start1":1050,"start2":1050,"length1":18,"length2":12},{"diffs":[[0,"orever)\n"],[-1,"\n"]],"start1":1077,"start2":1077,"length1":9,"length2":8}]}]},{"timestamp":1744157704398,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"[] = [] "],[1," // ✅"],[0," Explici"]],"start1":122,"start2":122,"length1":16,"length2":21}]}]},{"timestamp":1744157716717,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"// after finding magnet, in should enter the maze and travel half of the grid distance:\n"],[0,"CutebotPro.distanceRunning(C"]],"start1":0,"start2":0,"length1":28,"length2":116},{"diffs":[[0," = ["],[-1,"0"],[0,"]\n"],[-1,"_py.py_array_clear(list)\n"],[0,"//"],[-1," "],[0," lef"]],"start1":200,"start2":200,"length1":39,"length2":12},{"diffs":[[0,"asic.pause(500)\n"],[1,"        // turn left and check\n"],[0,"        CutebotP"]],"start1":618,"start2":618,"length1":32,"length2":63},{"diffs":[[0,"      //"],[-1," "],[0," append "]],"start1":957,"start2":957,"length1":17,"length2":16},{"diffs":[[0,"d 2 "],[-1,"if turning"],[1,"to the list if it is going to the"],[0," lef"]],"start1":971,"start2":971,"length1":18,"length2":41}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"ts.CM)\n\n"],[1,"let "],[0,"sonar = "]],"start1":84,"start2":84,"length1":16,"length2":20},{"diffs":[[0," 0\nl"],[-1,"ist"],[1,"et list: number[]"],[0," = ["],[-1,"0"],[0,"]  "],[-1,"\nlist.clear()\n\n#"],[1,"Explicitly typed list\n\n//"],[0," lef"]],"start1":103,"start2":103,"length1":35,"length2":57},{"diffs":[[0,"llowing\n"],[-1,"def"],[1,"function"],[0," check_d"]],"start1":169,"start2":169,"length1":19,"length2":24},{"diffs":[[0,"stance()"],[-1,":"],[1," {"],[0,"\n    ret"]],"start1":194,"start2":194,"length1":17,"length2":18},{"diffs":[[0,"RS)\n"],[-1,"\ndef"],[1,"}\n\nfunction"],[0," on_"]],"start1":257,"start2":257,"length1":12,"length2":19},{"diffs":[[0,"er()"],[-1,":\n    global sonar"],[1," {"],[0,"\n   "]],"start1":281,"start2":281,"length1":26,"length2":10},{"diffs":[[0,"e()\n    "],[-1,"print("],[1,"console.logValue(\"Sonar\", "],[0,"sonar)\n\n"]],"start1":313,"start2":313,"length1":22,"length2":42},{"diffs":[[0,"ar)\n\n    if "],[1,"("],[0,"sonar > 5:\n "]],"start1":350,"start2":350,"length1":24,"length2":25},{"diffs":[[0,"onar > 5"],[-1,":"],[1,") {"],[0,"\n       "]],"start1":364,"start2":364,"length1":17,"length2":19},{"diffs":[[0,"ist."],[-1,"append(1)  # append 1 if g"],[1,"push(1)  // G"],[0,"oing"]],"start1":484,"start2":484,"length1":34,"length2":21},{"diffs":[[0,"\n   "],[1," }"],[0," else"],[-1,":"],[1," {"],[0,"\n   "]],"start1":514,"start2":514,"length1":14,"length2":17},{"diffs":[[0,"     if "],[1,"("],[0,"sonar < "]],"start1":531,"start2":531,"length1":16,"length2":17},{"diffs":[[0,"onar < 5"],[-1,":"],[1,") {"],[0,"\n       "]],"start1":541,"start2":541,"length1":17,"length2":19},{"diffs":[[0,"asic.pause(500)\n"],[1,"            // turn left and check\n"],[0,"            Cute"]],"start1":566,"start2":566,"length1":32,"length2":67},{"diffs":[[0,"        "],[1,"let "],[0,"left = c"]],"start1":745,"start2":745,"length1":16,"length2":20},{"diffs":[[0,"    "],[-1,"print("],[1,"console.logValue(\"Left\", "],[0,"left"]],"start1":789,"start2":789,"length1":14,"length2":33},{"diffs":[[0,"ist."],[-1,"append(2)  # append 2 if turn"],[1,"push(2)  // Go"],[0,"ing "]],"start1":940,"start2":940,"length1":37,"length2":22},{"diffs":[[0,"use(500)"],[1,"\n        }\n    }\n}"],[0,"\n\nbasic."]],"start1":987,"start2":987,"length1":16,"length2":34}]}]},{"timestamp":1744157915408,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"path = [0]\npath.clear()\n\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE90)\n    basic.pause(500)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE90)\n    basic.pause(500)\n\ndef turn_around"],[1,"CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 16, CutebotProDistanceUnits.CM)\n\nsonar = 0\nlist = [0]  \nlist.clear()\n\n# left wall following\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef on_forever():\n    global sonar\n    sonar = check_distance"],[0,"()"],[-1,":"],[0,"\n    "],[-1,"CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE180)\n    basic.pause(500)\n\ndef move_forward():\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30, CutebotProDistanceUnits.CM)\n    basic.pause(500)\n\ndef retrace_path():\n    while len(path) > 0:\n        last_move = path.pop()\n        if last_move == 1:  # was forward\n            turn_around()\n            move_forward()\n        elif last_move == 2:  # was left\n            turn_right()\n            move_forward()\n        elif last_move == 3:  # was right\n            turn_left()\n            move_forward()\n        elif last_move == 0:\n            # already backtracked\n            continue\n\n# initial move into the maze\n"],[1,"print(sonar)\n\n    if sonar > 5:\n        CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30, CutebotProDistanceUnits.CM)\n        list.append(1)  # append 1 if going straight\n    else:\n        if sonar < 5:\n            basic.pause(500)\n            CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE90)\n            basic.pause(500)\n            left = check_distance()\n            print(left)\n            "],[0,"Cute"]],"start1":0,"start2":0,"length1":1099,"length2":743},{"diffs":[[0,"tation.ADVANCE, "],[-1,"16"],[1,"30"],[0,", CutebotProDist"]],"start1":782,"start2":782,"length1":34,"length2":34},{"diffs":[[0,"CM)\n"],[-1,"\ndef on_forever():\n    # check left\n    turn_left()\n    left = check_distance()\n    turn_right()  # return to original heading\n\n    forward = check_distance()\n\n    # check right\n    turn_right()\n    right = check_distance()\n    turn_left()  # return to original heading\n\n    if left > 5:\n        turn_left()\n        move_forward()\n        path.append(2)\n    elif forward > 5:\n        move_forward()\n        path.append(1)\n    elif right > 5:\n        turn_right()\n        move_forward()\n        path.append(3)\n    else:\n        # dead end: backtrack\n        turn_around()\n        path.append(0)\n        retrace_path("],[1,"            list.append(2)  # append 2 if turning left\n            basic.pause(500"],[0,")\n\nb"]],"start1":826,"start2":826,"length1":623,"length2":90},{"diffs":[[0,"orever)\n"],[1,"\n"]],"start1":933,"start2":933,"length1":8,"length2":9}]}]},{"timestamp":1744158891900,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"let path = [0]\n_py.py_array_clear(path)\nfunction check_distance(): number {\n    return CutebotPro.ultrasonic(SonarUnit.Centimeters)\n}\n\nfunction turn_left() {\n    CutebotPro.trolleySteering(CutebotProTurn.LeftInPlace, CutebotProAngle.Angle90)\n    basic.pause(500)\n}\n\nfunction turn_right() {\n    CutebotPro.trolleySteering(CutebotProTurn.RightInPlace, CutebotProAngle.Angle90)\n    basic.pause(500)\n}\n\nfunction turn_around() {\n    CutebotPro.trolleySteering(CutebotProTurn.LeftInPlace, CutebotProAngle.Angle180)\n    basic.pause(500)\n}\n\nfunction move_forward() {\n    CutebotPro.distanceRunning(CutebotProOrientation.Advance, 30, CutebotProDistanceUnits.Cm)\n    basic.pause(500)\n}\n\nfunction retrace_path() {\n    let last_move: any;\n    while (path.length > 0) {\n        last_move = _py.py_array_pop(path)\n        if (last_move == 1) {\n            //  was forward\n            turn_around()\n            move_forward()\n        } else if (last_move == 2) {\n            //  was left\n            turn_right()\n            move_forward()\n        } else if (last_move == 3) {\n            //  was right\n            turn_left()\n            move_forward()\n        } else if (last_move == 0) {\n            //  already backtracked\n            continue\n        }\n        \n    }\n}\n\n//  initial move into the maze\n"],[1,"CutebotPro.distanceRunning(CutebotProOrientation.Advance, 16, CutebotProDistanceUnits.Cm)\nlet sonar = 0\nlet list = [0]\n_py.py_array_clear(list)\n//  left wall following\nfunction check_distance(): number {\n    return CutebotPro.ultrasonic(SonarUnit.Centimeters)\n}\n\nbasic.forever(function on_forever() {\n    let left: number;\n    \n    sonar = check_distance()\n    console.log(sonar)\n    if (sonar > 5) {\n        CutebotPro.distanceRunning(CutebotProOrientation.Advance, 30, CutebotProDistanceUnits.Cm)\n        list.push(1)\n    } else if (sonar < 5) {\n        basic.pause(500)\n        CutebotPro.trolleySteering(CutebotProTurn.LeftInPlace, CutebotProAngle.Angle90)\n        basic.pause(500)\n        left = check_distance()\n        console.log(left)\n        "],[0,"Cute"]],"start1":0,"start2":0,"length1":1296,"length2":756},{"diffs":[[0,"tation.Advance, "],[-1,"16"],[1,"30"],[0,", CutebotProDist"]],"start1":794,"start2":794,"length1":34,"length2":34},{"diffs":[[0,"Cm)\n"],[-1,"basic.forever(function on_forever() {\n    //  check left\n    turn_left()\n    let left = check_distance()\n    turn_right()\n    //  return to original heading\n    let forward = check_distance()\n    //  check right\n    turn_right()\n    let right = check_distance()\n    turn_left()\n    //  return to original heading\n    if (left > 5) {\n        turn_left()\n        move_forward()\n        path.push(2)\n    } else if (forward > 5) {\n        move_forward()\n        path.push(1)\n    } else if (right > 5) {\n        turn_right()\n        move_forward()\n        path.push(3)\n    } else {\n        //  dead end: backtrack\n        turn_around()\n        path.push(0)\n        retrace_path("],[1,"        list.push(2)\n        //  append 2 if turning left\n        basic.pause(500"],[0,")\n  "]],"start1":838,"start2":838,"length1":681,"length2":89}]}]},{"timestamp":1744158892053,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"let "],[-1,"left: number;\nlet front: number;\nlet right: number;\n//  Move into the maze\nCutebotPro.distanceRunning(CutebotProOrientation.Advance, 16, CutebotProDistanceUnits.Cm)\nbasic.pause(1000)\n//  Track movement history\nlet path = []"],[1,"path = [0]\n_py.py_array_clear(path)"],[0,"\nfun"]],"start1":0,"start2":0,"length1":231,"length2":43},{"diffs":[[0,"    basic.pause("],[-1,"8"],[1,"5"],[0,"00)\n}\n\nfunction "]],"start1":242,"start2":242,"length1":33,"length2":33},{"diffs":[[0,"    basic.pause("],[-1,"8"],[1,"5"],[0,"00)\n}\n\nfunction "]],"start1":375,"start2":375,"length1":33,"length2":33},{"diffs":[[0,"basic.pause("],[-1,"8"],[1,"5"],[0,"00)\n}\n\nfunct"]],"start1":513,"start2":513,"length1":25,"length2":25},{"diffs":[[0,"use("],[-1,"8"],[1,"5"],[0,"00)\n}\n\n"],[-1,"while (true) {\n    //  Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(200)\n    //  Face forward again\n    turn_right()\n    front = check_distance()\n    basic.pause(200)\n    //  Look righ"],[1,"function retrace_path() {\n    let last_move: any;\n    while (path.length > 0) {\n        last_move = _py.py_array_pop(path)\n        if (last_move == 1) {\n            //  was forward\n            turn_around()\n            move_forward()\n        } else if (last_move == 2) {\n            //  was left\n            turn_right()\n            move_forward()\n        } else if (last_move == 3) {\n            //  was right\n            turn_left()\n            move_forward()\n        } else if (last_move == 0) {\n            //  already backtracked\n            continue\n        }\n        \n    }\n}\n\n//  initial move into the maze\nCutebotPro.distanceRunning(CutebotProOrientation.Advance, 16, CutebotProDistanceUnits.Cm)\nbasic.forever(function on_forever() {\n    //  check lef"],[0,"t\n  "]],"start1":665,"start2":665,"length1":225,"length2":776},{"diffs":[[0,"urn_"],[-1,"righ"],[1,"lef"],[0,"t()\n    "],[-1,"righ"],[1,"let lef"],[0,"t = "]],"start1":1444,"start2":1444,"length1":24,"length2":26},{"diffs":[[0,"    "],[-1,"basic.pause(200)\n    //  Face forward again"],[1,"turn_right()\n    //  return to original heading\n    let forward = check_distance()\n    //  check right"],[0,"\n   "]],"start1":1487,"start2":1487,"length1":51,"length2":110},{"diffs":[[0,"urn_"],[-1,"lef"],[1,"righ"],[0,"t()\n    "],[-1,"basic.pause(200)\n    //  Maze decision logic (left-hand rule)"],[1,"let right = check_distance()\n    turn_left()\n    //  return to original heading"],[0,"\n   "]],"start1":1599,"start2":1599,"length1":80,"length2":99},{"diffs":[[0,"f (f"],[-1,"ront"],[1,"orward"],[0," > 5) {\n"],[-1,"        //  2 = left\n"],[0,"    "]],"start1":1791,"start2":1791,"length1":41,"length2":22},{"diffs":[[0,") {\n"],[-1,"        //  1 = forward\n"],[0,"    "]],"start1":1877,"start2":1877,"length1":32,"length2":8},{"diffs":[[0,"//  "],[-1,"3 = right\n        //  Dead end: turn around and move\n        turn_around()\n        move_forward()\n        path.push(0"],[1,"dead end: backtrack\n        turn_around()\n        path.push(0)\n        retrace_path("],[0,")\n  "]],"start1":1967,"start2":1967,"length1":125,"length2":92},{"diffs":[[0,"}\n    \n}"],[1,")"],[0,"\n"]],"start1":2061,"start2":2061,"length1":9,"length2":10}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"from cutebot import *\nimport basic\n\n# Move into the maze\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 16, CutebotProDistanceUnits.CM)\nbasic.pause(1000)\n\n# Track movement history\npath = []"],[1,"path = [0]\npath.clear()"],[0,"\n\nde"]],"start1":0,"start2":0,"length1":205,"length2":27},{"diffs":[[0,"    basic.pause("],[-1,"8"],[1,"5"],[0,"00)\n\ndef turn_ri"]],"start1":208,"start2":208,"length1":33,"length2":33},{"diffs":[[0,"    basic.pause("],[-1,"8"],[1,"5"],[0,"00)\n\ndef turn_ar"]],"start1":336,"start2":336,"length1":33,"length2":33},{"diffs":[[0,"basic.pause("],[-1,"8"],[1,"5"],[0,"00)\n\ndef mov"]],"start1":469,"start2":469,"length1":25,"length2":25},{"diffs":[[0,"use("],[-1,"8"],[1,"5"],[0,"00)\n\n"],[-1,"while True:\n    # Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(200)\n\n    # Face forward again\n"],[1,"def retrace_path():\n    while len(path) > 0:\n        last_move = path.pop()\n        if last_move == 1:  # was forward\n            turn_around()\n            move_forward()\n        elif last_move == 2:  # was left\n            turn_right()\n            move_forward()\n        elif last_move == 3:  # was right\n        "],[0,"    "]],"start1":614,"start2":614,"length1":133,"length2":328},{"diffs":[[0,"urn_"],[-1,"righ"],[1,"lef"],[0,"t()\n    "],[1," "],[-1,"front = check_distance()\n    basic.pause(200)\n\n    # Look righ"],[1,"       move_forward()\n        elif last_move == 0:\n            # already backtracked\n            continue\n\n# initial move into the maze\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 16, CutebotProDistanceUnits.CM)\n\ndef on_forever():\n    # check lef"],[0,"t\n  "]],"start1":943,"start2":943,"length1":82,"length2":281},{"diffs":[[0,"urn_"],[-1,"righ"],[1,"lef"],[0,"t()\n    "],[-1,"righ"],[1,"lef"],[0,"t = "]],"start1":1227,"start2":1227,"length1":24,"length2":22},{"diffs":[[0,"    "],[-1,"basic.pause(200)\n\n    # Face forward again"],[1,"turn_right()  # return to original heading\n\n    forward = check_distance()\n\n    # check right"],[0,"\n   "]],"start1":1266,"start2":1266,"length1":50,"length2":101},{"diffs":[[0,"urn_"],[-1,"lef"],[1,"righ"],[0,"t()\n    "],[-1,"basic.pause(200)\n\n    # Maze decision logic (left-hand rule)"],[1,"right = check_distance()\n    turn_left()  # return to original heading\n"],[0,"\n   "]],"start1":1369,"start2":1369,"length1":79,"length2":91},{"diffs":[[0,"d(2)"],[-1,"  # 2 = left"],[0,"\n   "]],"start1":1535,"start2":1535,"length1":20,"length2":8},{"diffs":[[0,"if f"],[-1,"ront"],[1,"orward"],[0," > 5"]],"start1":1546,"start2":1546,"length1":12,"length2":14},{"diffs":[[0,"d(1)"],[-1,"  # 1 = forward"],[0,"\n   "]],"start1":1603,"start2":1603,"length1":23,"length2":8},{"diffs":[[0,"d(3)"],[-1,"  # 3 = right"],[0,"\n   "]],"start1":1690,"start2":1690,"length1":21,"length2":8},{"diffs":[[0,"      # "],[-1,"D"],[1,"d"],[0,"ead end:"]],"start1":1707,"start2":1707,"length1":17,"length2":17},{"diffs":[[0,"nd: "],[-1,"turn around and move"],[1,"backtrack"],[0,"\n   "]],"start1":1721,"start2":1721,"length1":28,"length2":17},{"diffs":[[0,"round()\n"],[-1,"        move_forward()\n"],[0,"        "]],"start1":1749,"start2":1749,"length1":39,"length2":16},{"diffs":[[0,"d(0)"],[1,"\n"],[0,"  "],[-1,"# 0 = dead end backtrack"],[1,"      retrace_path()\n\nbasic.forever(on_forever)"],[0,"\n"]],"start1":1775,"start2":1775,"length1":31,"length2":55}]}]},{"timestamp":1744159448903,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"c.pause(800)\n}\n\n"],[1,"function turn_around() {\n    CutebotPro.trolleySteering(CutebotProTurn.LeftInPlace, CutebotProAngle.Angle180)\n    basic.pause(800)\n}\n\n"],[0,"function move_fo"]],"start1":571,"start2":571,"length1":32,"length2":166},{"diffs":[[0,"push(3)\n"],[1,"    } else {\n        //  3 = right\n        //  Dead end: turn around and move\n        turn_around()\n        move_forward()\n        path.push(0)\n"],[0,"    }\n  "]],"start1":1538,"start2":1538,"length1":16,"length2":160}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"pause(800)\n\n"],[1,"def turn_around():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE180)\n    basic.pause(800)\n\n"],[0,"def move_for"]],"start1":524,"start2":524,"length1":24,"length2":153},{"diffs":[[0,"# 3 = right\n"],[1,"    else:\n        # Dead end: turn around and move\n        turn_around()\n        move_forward()\n        path.append(0)  # 0 = dead end backtrack\n"]],"start1":1444,"start2":1444,"length1":12,"length2":157}]}]},{"timestamp":1744160030250,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"//  "],[-1,"Enter"],[1,"Move into"],[0," the"]],"start1":56,"start2":56,"length1":13,"length2":17},{"diffs":[[0,"00)\n"],[-1,"let path = []\nlet first_move_done = false\n//  flag to avoid turning into the wall"],[1,"//  Track movement history\nlet path = []"],[0,"\nfun"]],"start1":183,"start2":183,"length1":89,"length2":48},{"diffs":[[0,"rn.LeftInPlace, "],[-1,"10"],[1,"CutebotProAngle.Angle9"],[0,"0)\n    basic.pau"]],"start1":389,"start2":389,"length1":34,"length2":54},{"diffs":[[0,"nPlace, "],[-1,"10"],[1,"CutebotProAngle.Angle9"],[0,"0)\n    b"]],"start1":530,"start2":530,"length1":18,"length2":38},{"diffs":[[0,") {\n"],[-1,"    if (!first_move_done) {\n        //  Go forward once before beginning wall-following\n        move_forward()\n        path.push(1)\n        first_move_done = true\n        continue\n    }\n    \n"],[0,"    "]],"start1":742,"start2":742,"length1":199,"length2":8},{"diffs":[[0,"(3)\n"],[-1,"    } else {\n        //  3 = right\n        //  Dead end — optional: turn around?\n        turn_left()\n        turn_left()\n        move_forward()\n        path.push(0)\n"],[0,"    "]],"start1":1408,"start2":1408,"length1":173,"length2":8}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"# Enter"],[1,"from cutebot import *\nimport basic\n\n# Move into"],[0," the"]],"start1":0,"start2":0,"length1":11,"length2":51},{"diffs":[[0,"0)\n\n"],[-1,"path = []\nfirst_move_done = False  # flag to avoid turning into the wall"],[1,"# Track movement history\npath = []"],[0,"\n\nde"]],"start1":163,"start2":163,"length1":80,"length2":42},{"diffs":[[0,".LEFT_IN_PLACE, "],[-1,"10"],[1,"CutebotProAngle.ANGLE9"],[0,"0)\n    basic.pau"]],"start1":345,"start2":345,"length1":34,"length2":54},{"diffs":[[0,"_PLACE, "],[-1,"10"],[1,"CutebotProAngle.ANGLE9"],[0,"0)\n    b"]],"start1":481,"start2":481,"length1":18,"length2":38},{"diffs":[[0,"ue:\n"],[-1,"    if not first_move_done:\n        # Go forward once before beginning wall-following\n        move_forward()\n        path.append(1)\n        first_move_done = True\n        continue\n\n"],[0,"    "]],"start1":681,"start2":681,"length1":189,"length2":8},{"diffs":[[0,"ght\n"],[-1,"    else:\n        # Dead end — optional: turn around?\n        turn_left()\n        turn_left()\n        move_forward()\n        path.append(0)\n"]],"start1":1323,"start2":1323,"length1":144,"length2":4}]}]},{"timestamp":1744160589203,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    basic.pause("],[-1,"3"],[1,"8"],[0,"00)\n}\n\nfunction "]],"start1":447,"start2":447,"length1":33,"length2":33},{"diffs":[[0,"basic.pause("],[-1,"3"],[1,"8"],[0,"00)\n}\n\nfunct"]],"start1":564,"start2":564,"length1":25,"length2":25},{"diffs":[[0,"c.pause("],[-1,"3"],[1,"8"],[0,"00)\n}\n\nw"]],"start1":712,"start2":712,"length1":17,"length2":17},{"diffs":[[0," if (left > "],[-1,"10"],[1,"5"],[0,") {\n        "]],"start1":1309,"start2":1309,"length1":26,"length2":25},{"diffs":[[0,"if (front > "],[-1,"10"],[1,"5"],[0,") {\n        "]],"start1":1401,"start2":1401,"length1":26,"length2":25},{"diffs":[[0,"right > "],[-1,"10"],[1,"5"],[0,") {\n    "]],"start1":1498,"start2":1498,"length1":18,"length2":17},{"diffs":[[0,"   \n"],[1,""],[0,"}\n"],[-1,"console.log(path)\n"]],"start1":1772,"start2":1772,"length1":24,"length2":6}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"    basic.pause("],[-1,"3"],[1,"8"],[0,"00)\n\ndef turn_ri"]],"start1":364,"start2":364,"length1":33,"length2":33},{"diffs":[[0,"basic.pause("],[-1,"3"],[1,"8"],[0,"00)\n\ndef mov"]],"start1":476,"start2":476,"length1":25,"length2":25},{"diffs":[[0,"c.pause("],[-1,"3"],[1,"8"],[0,"00)\n\nwhi"]],"start1":617,"start2":617,"length1":17,"length2":17},{"diffs":[[0,"  if left > "],[-1,"10"],[1,"5"],[0,":\n        tu"]],"start1":1192,"start2":1192,"length1":26,"length2":25},{"diffs":[[0,"lif front > "],[-1,"10"],[1,"5"],[0,":\n        mo"]],"start1":1290,"start2":1290,"length1":26,"length2":25},{"diffs":[[0,"right > "],[-1,"10"],[1,"5"],[0,":\n      "]],"start1":1375,"start2":1375,"length1":18,"length2":17},{"diffs":[[0,"(0)\n"],[-1,"\nprint(path)"]],"start1":1602,"start2":1602,"length1":16,"length2":4}]}]},{"timestamp":1744161121134,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e, 1"],[-1,"4"],[1,"6"],[0,", Cu"]],"start1":130,"start2":130,"length1":9,"length2":9},{"diffs":[[0,"rn.LeftInPlace, "],[-1,"95"],[1,"100"],[0,")\n    basic.paus"]],"start1":426,"start2":426,"length1":34,"length2":35},{"diffs":[[0,"ce, "],[-1,"95"],[1,"100"],[0,")\n  "]],"start1":551,"start2":551,"length1":10,"length2":11},{"diffs":[[0,"ce, "],[-1,"25"],[1,"30"],[0,", Cu"]],"start1":668,"start2":668,"length1":10,"length2":10},{"diffs":[[0,"   }"],[1," else {"],[0,"\n    "],[-1,"\n}\n"],[1,"    "],[0,"//  "]],"start1":1604,"start2":1604,"length1":16,"length2":24},{"diffs":[[0,"= right\n"],[1,"        //  Dead end — optional: turn around?\n        turn_left()\n        turn_left()\n        move_forward()\n        path.push(0)\n    }\n    \n}\n"],[0,"console."]],"start1":1630,"start2":1630,"length1":16,"length2":159}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"E, 1"],[-1,"4"],[1,"6"],[0,", Cu"]],"start1":73,"start2":73,"length1":9,"length2":9},{"diffs":[[0,".LEFT_IN_PLACE, "],[-1,"95"],[1,"100"],[0,")\n    basic.paus"]],"start1":343,"start2":343,"length1":34,"length2":35},{"diffs":[[0,"CE, "],[-1,"95"],[1,"100"],[0,")\n  "]],"start1":463,"start2":463,"length1":10,"length2":11},{"diffs":[[0,"CE, "],[-1,"25"],[1,"30"],[0,", Cu"]],"start1":573,"start2":573,"length1":10,"length2":10},{"diffs":[[0," = right"],[1,"\n    else:\n        # Dead end — optional: turn around?\n        turn_left()\n        turn_left()\n        move_forward()\n        path.append(0)"],[0,"\n\nprint("]],"start1":1460,"start2":1460,"length1":16,"length2":156}]}]},{"timestamp":1744161362693,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"#from cutebot import *\nimport basic, serial\n\n"],[0,"# En"]],"start1":0,"start2":0,"length1":49,"length2":4},{"diffs":[[0,"0)\n\n"],[-1,"# Optional: stop condition (e.g. 20 steps or button pressed)\nwhile len(path) < 20:  # adjust this condition to match your needs\n    if not first_move_done:"],[1,"while True:\n    if not first_move_done:\n        # Go forward once before beginning wall-following"],[0,"\n   "]],"start1":625,"start2":625,"length1":163,"length2":105},{"diffs":[[0,"ght\n"],[-1,"    else:\n        # Dead end: optional backtrack\n        turn_left()\n        turn_left()\n        move_forward()\n        path.append(0)  # 0 = backtrack\n\n# Finished navigating:\n"],[1,"\nprint(path)"]],"start1":1463,"start2":1463,"length1":180,"length2":16}]}]},{"timestamp":1744162538858,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"er;\n"],[-1,"// from cutebot import *\n"],[0,"//  "]],"start1":52,"start2":52,"length1":33,"length2":8},{"diffs":[[0,"\n}\n\n"],[-1,"//  Optional: stop condition (e.g. 20 steps or button pressed)\nwhile (path.length < 20) {\n    //  adjust this condition to match your needs\n    if (!first_move_done) {"],[1,"while (true) {\n    if (!first_move_done) {\n        //  Go forward once before beginning wall-following"],[0,"\n   "]],"start1":722,"start2":722,"length1":175,"length2":110},{"diffs":[[0,"   }"],[-1," else {\n  "],[1,"\n"],[0,"    "],[-1,"  "],[1,"\n}\n"],[0,"//  "]],"start1":1602,"start2":1602,"length1":24,"length2":16},{"diffs":[[0,"ght\n"],[-1,"        //  Dead end: optional backtrack\n        turn_left()\n        turn_left()\n        move_forward()\n        path.push(0)\n    }\n    \n}"],[1,"console.log(path)"],[0,"\n"]],"start1":1624,"start2":1624,"length1":142,"length2":22}]}]},{"timestamp":1744162538971,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"number;\n"],[1,"// from cutebot import *\n"],[0,"//  Ente"]],"start1":48,"start2":48,"length1":16,"length2":41},{"diffs":[[0,"= false\n"],[1,"//  flag to avoid turning into the wall\n"],[0,"function"]],"start1":242,"start2":242,"length1":16,"length2":56},{"diffs":[[0,"    basic.pause("],[-1,"1"],[1,"3"],[0,"00)\n}\n\nfunction "]],"start1":471,"start2":471,"length1":33,"length2":33},{"diffs":[[0,"basic.pause("],[-1,"1"],[1,"3"],[0,"00)\n}\n\nfunct"]],"start1":587,"start2":587,"length1":25,"length2":25},{"diffs":[[0,"use("],[-1,"1"],[1,"3"],[0,"00)\n}\n\n"],[-1,"while (true) {"],[1,"//  Optional: stop condition (e.g. 20 steps or button pressed)\nwhile (path.length < 20) {\n    //  adjust this condition to match your needs"],[0,"\n   "]],"start1":739,"start2":739,"length1":30,"length2":155},{"diffs":[[0,"    basic.pause("],[-1,"1"],[1,"2"],[0,"00)\n    //  Face"]],"start1":1084,"start2":1084,"length1":33,"length2":33},{"diffs":[[0,"use("],[-1,"1"],[1,"2"],[0,"00)\n"],[-1,"    //  Stop if maze ends (huge opening ahead)\n    if (front > 100) {\n        serial.writeLine(\"Maze end detected! Stopping.\")\n        break\n    }\n    \n"],[0,"    "]],"start1":1190,"start2":1190,"length1":165,"length2":13},{"diffs":[[0,"    basic.pause("],[-1,"1"],[1,"2"],[0,"00)\n    //  Face"]],"start1":1264,"start2":1264,"length1":33,"length2":33},{"diffs":[[0,"c.pause("],[-1,"1"],[1,"2"],[0,"00)\n    "]],"start1":1336,"start2":1336,"length1":17,"length2":17},{"diffs":[[0,"aze "],[-1,"logic"],[1,"decision logic (left-hand rule)"],[0,"\n   "]],"start1":1358,"start2":1358,"length1":13,"length2":39},{"diffs":[[0," (front > 10) {\n"],[1,"        //  2 = left\n"],[0,"        move_for"]],"start1":1492,"start2":1492,"length1":32,"length2":53},{"diffs":[[0," (right > 10) {\n"],[1,"        //  1 = forward\n"],[0,"        turn_rig"]],"start1":1586,"start2":1586,"length1":32,"length2":56},{"diffs":[[0,"//  "],[-1,"Dead end\n        turn_left()\n        turn_left()\n        move_forward()\n        path.push(0)\n    }\n    \n}\n//  Output path after reaching end\nserial.writeLine(\"Maze path taken:\")\nfor (let step of path) {\n    if (step == 1) {\n        serial.writeLine(\"Forward\")\n    } else if (step == 2) {\n        serial.writeLine(\"Left\")\n    } else if (step == 3) {\n        serial.writeLine(\"Right\")\n    } else if (step == 0) {\n        serial.writeLine(\"Backtrack\""],[1,"3 = right\n        //  Dead end: optional backtrack\n        turn_left()\n        turn_left()\n        move_forward()\n        path.push(0"],[0,")\n  "]],"start1":1712,"start2":1712,"length1":455,"length2":141}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[1,"#"],[0,"from cut"]],"start1":0,"start2":0,"length1":8,"length2":9},{"diffs":[[0," = False"],[1,"  # flag to avoid turning into the wall"],[0,"\n\ndef ch"]],"start1":197,"start2":197,"length1":16,"length2":55},{"diffs":[[0,"    basic.pause("],[-1,"1"],[1,"3"],[0,"00)\n\ndef turn_ri"]],"start1":408,"start2":408,"length1":33,"length2":33},{"diffs":[[0,"basic.pause("],[-1,"1"],[1,"3"],[0,"00)\n\ndef mov"]],"start1":519,"start2":519,"length1":25,"length2":25},{"diffs":[[0,"use("],[-1,"1"],[1,"3"],[0,"00)\n\n"],[-1,"while True:"],[1,"# Optional: stop condition (e.g. 20 steps or button pressed)\nwhile len(path) < 20:  # adjust this condition to match your needs"],[0,"\n   "]],"start1":664,"start2":664,"length1":25,"length2":141},{"diffs":[[0,"    basic.pause("],[-1,"1"],[1,"2"],[0,"00)\n\n    # Face "]],"start1":985,"start2":985,"length1":33,"length2":33},{"diffs":[[0,"use("],[-1,"1"],[1,"2"],[0,"00)\n\n"],[-1,"    # Stop if maze ends (huge opening ahead)\n    if front > 100:\n        serial.write_line(\"Maze end detected! Stopping.\")\n        break\n\n"],[0,"    "]],"start1":1090,"start2":1090,"length1":152,"length2":14},{"diffs":[[0,"    basic.pause("],[-1,"1"],[1,"2"],[0,"00)\n\n    # Face "]],"start1":1163,"start2":1163,"length1":33,"length2":33},{"diffs":[[0,"c.pause("],[-1,"1"],[1,"2"],[0,"00)\n\n   "]],"start1":1234,"start2":1234,"length1":17,"length2":17},{"diffs":[[0,"aze "],[-1,"logic"],[1,"decision logic (left-hand rule)"],[0,"\n   "]],"start1":1255,"start2":1255,"length1":13,"length2":39},{"diffs":[[0,"ppend(2)"],[1,"  # 2 = left"],[0,"\n    eli"]],"start1":1366,"start2":1366,"length1":16,"length2":28},{"diffs":[[0,"th.append(1)"],[1,"  # 1 = forward"],[0,"\n    elif ri"]],"start1":1441,"start2":1441,"length1":24,"length2":39},{"diffs":[[0,"ppend(3)"],[1,"  # 3 = right"],[0,"\n    els"]],"start1":1548,"start2":1548,"length1":16,"length2":29},{"diffs":[[0,"Dead end"],[1,": optional backtrack"],[0,"\n       "]],"start1":1590,"start2":1590,"length1":16,"length2":36},{"diffs":[[0,"d(0)"],[-1,"\n\n# Output path after reaching end\nserial.write_line(\"Maze path taken:\")\nfor step in path:\n    if step == 1:\n        serial.write_line(\"Forward\")\n    elif step == 2:\n        serial.write_line(\"Left\")\n    elif step == 3:\n        serial.write_line(\"Right\")\n    elif step == 0:\n        serial.write_line(\"Backtrack\")"],[1,"  # 0 = backtrack\n\n# Finished navigating:"],[0,"\n"]],"start1":1700,"start2":1700,"length1":318,"length2":46}]}]},{"timestamp":1744162901657,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"if (left > 1"],[-1,"5"],[1,"0"],[0,") {\n        "]],"start1":1334,"start2":1334,"length1":25,"length2":25},{"diffs":[[0,"f (front > 1"],[-1,"5"],[1,"0"],[0,") {\n        "]],"start1":1427,"start2":1427,"length1":25,"length2":25},{"diffs":[[0,"ight > 1"],[-1,"5"],[1,"0"],[0,") {\n    "]],"start1":1504,"start2":1504,"length1":17,"length2":17}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0," if left > 1"],[-1,"5"],[1,"0"],[0,":\n        tu"]],"start1":1250,"start2":1250,"length1":25,"length2":25},{"diffs":[[0,"if front > 1"],[-1,"5"],[1,"0"],[0,":\n        mo"]],"start1":1337,"start2":1337,"length1":25,"length2":25},{"diffs":[[0,"ight > 1"],[-1,"5"],[1,"0"],[0,":\n      "]],"start1":1408,"start2":1408,"length1":17,"length2":17}]}]},{"timestamp":1744163200492,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[1,"from cutebot import *\nimport basic, serial\n"],[0,"\n# Enter"]],"start1":0,"start2":0,"length1":8,"length2":51}]}]},{"timestamp":1744165222514,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[1,"\n"],[0,"# Enter "]],"start1":0,"start2":0,"length1":8,"length2":9}]}]},{"timestamp":1744165224237,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"maze"],[-1," (get to)"],[0,"\nCut"]],"start1":12,"start2":12,"length1":17,"length2":8}]}]},{"timestamp":1744216383698,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"maze"],[-1," (get to)"],[0,"\nCut"]],"start1":70,"start2":70,"length1":17,"length2":8}]}]},{"timestamp":1744216383865,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"t to"],[-1," the middle of the grid"],[0,")\n"],[1,""],[0,"Cute"]],"start1":78,"start2":78,"length1":33,"length2":10},{"diffs":[[0,"\n    \n    //"],[1," "],[0," Look left\n "]],"start1":835,"start2":835,"length1":24,"length2":25},{"diffs":[[0,"ause(100)\n    //"],[1," "],[0," Face forward ag"]],"start1":914,"start2":914,"length1":32,"length2":33},{"diffs":[[0,")\n    //"],[1," "],[0," Stop if"]],"start1":1016,"start2":1016,"length1":16,"length2":17},{"diffs":[[0," \n    //"],[1," "],[0," Look ri"]],"start1":1168,"start2":1168,"length1":16,"length2":17},{"diffs":[[0,")\n    //"],[1," "],[0," Face fo"]],"start1":1254,"start2":1254,"length1":16,"length2":17},{"diffs":[[0,")\n    //"],[1," "],[0," Maze lo"]],"start1":1318,"start2":1318,"length1":16,"length2":17},{"diffs":[[0,"      //"],[1," "],[0," Dead en"]],"start1":1606,"start2":1606,"length1":16,"length2":17},{"diffs":[[0," end"],[-1,"  - have not tested it out yet"],[0,"\n   "]],"start1":1620,"start2":1620,"length1":38,"length2":8},{"diffs":[[0,"\n    \n}\n"],[-1,""],[0,"//"],[1," "],[0," Output "]],"start1":1714,"start2":1714,"length1":18,"length2":19}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"t to"],[-1," the middle of the grid"],[0,")\n"],[1,""],[0,"Cute"]],"start1":20,"start2":20,"length1":33,"length2":10},{"diffs":[[0,"tinue\n\n    #"],[1," "],[0,"Look left\n  "]],"start1":727,"start2":727,"length1":24,"length2":25},{"diffs":[[0,"ause(100)\n\n    #"],[1," "],[0,"Face forward aga"]],"start1":805,"start2":805,"length1":32,"length2":33},{"diffs":[[0,")\n\n    #"],[1," "],[0,"Stop if "]],"start1":906,"start2":906,"length1":16,"length2":17},{"diffs":[[0,"k\n\n    #"],[1," "],[0,"Look rig"]],"start1":1044,"start2":1044,"length1":16,"length2":17},{"diffs":[[0,")\n\n    #"],[1," "],[0,"Face for"]],"start1":1129,"start2":1129,"length1":16,"length2":17},{"diffs":[[0,")\n\n    #"],[1," "],[0,"Maze log"]],"start1":1192,"start2":1192,"length1":16,"length2":17},{"diffs":[[0,"   #"],[1," "],[0,"Dead end"],[-1,"  - have not tested it out yet"],[0,"\n   "]],"start1":1466,"start2":1466,"length1":46,"length2":17},{"diffs":[[0,"end(0)\n\n"],[-1,""],[0,"#"],[1," "],[0,"Output p"]],"start1":1559,"start2":1559,"length1":17,"length2":18}]}]},{"timestamp":1744216561160,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"ing end\n"],[-1,"\n"],[0,"serial.w"]],"start1":1637,"start2":1637,"length1":17,"length2":16}]}]},{"timestamp":1744218255419,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"end\n"],[-1,"input.button_is_pressed(Button.A)"],[0,"\nser"]],"start1":1641,"start2":1641,"length1":41,"length2":8}]}]},{"timestamp":1744218318851,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"end\n"],[-1,"if (input.buttonIsPressed(Button.A) == true) {\n    "],[0,"seri"]],"start1":1798,"start2":1798,"length1":59,"length2":8},{"diffs":[[0,"aken:\")\n"],[-1,"    "],[0,"for (let"]],"start1":1831,"start2":1831,"length1":20,"length2":16},{"diffs":[[0,") {\n    "],[-1,"   "],[-1," "],[0,"if (step"]],"start1":1860,"start2":1860,"length1":20,"length2":16},{"diffs":[[0,"tep == 1) {\n"],[-1,"    "],[0,"        seri"]],"start1":1873,"start2":1873,"length1":28,"length2":24},{"diffs":[[0,"rward\")\n    "],[-1," "],[-1,"   "],[0,"} else if (s"]],"start1":1913,"start2":1913,"length1":28,"length2":24},{"diffs":[[0,"tep == 2) {\n"],[-1,"    "],[0,"        seri"]],"start1":1937,"start2":1937,"length1":28,"length2":24},{"diffs":[[0,"ine(\"Left\")\n"],[-1,"    "],[0,"    } else i"]],"start1":1970,"start2":1970,"length1":28,"length2":24},{"diffs":[[0,"== 3) {\n        "],[-1,"  "],[-1,"  "],[0,"serial.writeLine"]],"start1":2002,"start2":2002,"length1":36,"length2":32},{"diffs":[[0,"t\")\n    "],[-1,"  "],[-1,"  "],[0,"} else i"]],"start1":2040,"start2":2040,"length1":20,"length2":16},{"diffs":[[0,") {\n        "],[-1," "],[-1,"   "],[0,"serial.write"]],"start1":2068,"start2":2068,"length1":28,"length2":24},{"diffs":[[0,"    "],[-1,"   "],[-1," "],[0,"}\n    "],[-1,"  "],[-1,"  \n    }\n}"],[0,"\n"],[1,"}"],[0,"\n"]],"start1":2110,"start2":2110,"length1":28,"length2":13}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"ing end\n"],[1,"input.button_is_pressed(Button.A)\n"],[0,"serial.w"]],"start1":1637,"start2":1637,"length1":16,"length2":50},{"diffs":[[0,"aken:\")\n"],[-1,"    "],[0,"for step"]],"start1":1709,"start2":1709,"length1":20,"length2":16},{"diffs":[[0,"th:\n    "],[-1,"   "],[-1," "],[0,"if step "]],"start1":1731,"start2":1731,"length1":20,"length2":16},{"diffs":[[0,"p == 1:\n"],[-1,"    "],[0,"        "]],"start1":1745,"start2":1745,"length1":20,"length2":16},{"diffs":[[0,"rward\")\n    "],[-1," "],[-1,"   "],[0,"elif step =="]],"start1":1782,"start2":1782,"length1":28,"length2":24},{"diffs":[[0,"p == 2:\n        "],[-1,"   "],[-1," "],[0,"serial.write_lin"]],"start1":1802,"start2":1802,"length1":36,"length2":32},{"diffs":[[0,"ine(\"Left\")\n"],[-1,"    "],[0,"    elif ste"]],"start1":1832,"start2":1832,"length1":28,"length2":24},{"diffs":[[0,"p == 3:\n        "],[-1," "],[-1,"   "],[0,"serial.write_lin"]],"start1":1856,"start2":1856,"length1":36,"length2":32},{"diffs":[[0,"Right\")\n"],[-1,"    "],[0,"    elif"]],"start1":1891,"start2":1891,"length1":20,"length2":16},{"diffs":[[0," 0:\n        "],[-1,"    "],[0,"serial.write"]],"start1":1915,"start2":1915,"length1":28,"length2":24},{"diffs":[[0,"k\")\n"],[-1,"\n# Simulates data from a second micro:bit\ndef on_button_pressed_a():\n    for i in range (length(path)):\n    radio.send_value(\"Directions to the maze\", path[i])\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\nradio.set_group(1)\n\ndef on_every_interval():\n    radio.send_value(\"t1\", input.temperature())\nloops.every_interval(60000, on_every_interval)\n\n"]],"start1":1954,"start2":1954,"length1":361,"length2":4}]}]},{"timestamp":1744218874842,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"CE, "],[-1,"30"],[1,"25"],[0,", Cu"]],"start1":564,"start2":564,"length1":10,"length2":10}]}]},{"timestamp":1744219070657,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":114}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":331,"start2":331,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1743731473355,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"wall obstacle avoidance\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1744047582150,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","main.py":"#after finding magnet, in should enter the maze and travel half of the grid distance:\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 16, CutebotProDistanceUnits.CM)\n\nsonar = 0\nmaze_directions=[]\n#left wall following\n\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef on_forever():\n    global sonar\n    sonar = check_distance()\n    print(sonar)\n\n    if sonar > 5:\n        CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30, CutebotProDistanceUnits.CM)\n        list.append(1)\n    else:\n        basic.pause(500)\n        #turn left and check\n        CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE90)\n        basic.pause(500)\n        left = check_distance()\n        print(left)\n        CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30, CutebotProDistanceUnits.CM)\n\n        \n        #return to original direction\n        CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE90)\n        basic.pause(500)\n        #decision\n        if left > 5:\n            CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE90)\n            CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30, CutebotProDistanceUnits.CM)\n\n        else:\n            \n            CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE90)\n\nbasic.forever(on_forever)\n","pxt.json":"{\n    \"name\": \"wall obstacle avoidance\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v2.1.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1744157704398,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","main.py":"#after finding magnet, in should enter the maze and travel half of the grid distance:\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 16, CutebotProDistanceUnits.CM)\n\nsonar = 0\nlist=[]\n#left wall following\n\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef on_forever():\n    global sonar\n    sonar=check_distance()\n    print(sonar)\n\n    if sonar>5:\n        CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30, CutebotProDistanceUnits.CM)\n        list.append(1) #append 1 to the list if it is going straight \n    else:\n        if sonar<5:\n            basic.pause(500)\n            #turn left and check\n            CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE90)\n            basic.pause(500)\n            left = check_distance()\n            print(left)\n            CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30, CutebotProDistanceUnits.CM)\n            list.append(2) #append 2 to the list if it is going to the left\n            basic.pause(500)\n            \nbasic.forever(on_forever)\n","pxt.json":"{\n    \"name\": \"wall obstacle avoidance\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v2.1.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1744160023605,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","main.py":"from cutebot import *\nimport basic\n\n# Move into the maze\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 16, CutebotProDistanceUnits.CM)\nbasic.pause(1000)\n\n# Track movement history\npath = []\n\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE90)\n    basic.pause(800)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE90)\n    basic.pause(800)\n\ndef turn_around():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, CutebotProAngle.ANGLE180)\n    basic.pause(800)\n\ndef move_forward():\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30, CutebotProDistanceUnits.CM)\n    basic.pause(800)\n\nwhile True:\n    # Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(200)\n\n    # Face forward again\n    turn_right()\n    front = check_distance()\n    basic.pause(200)\n\n    # Look right\n    turn_right()\n    right = check_distance()\n    basic.pause(200)\n\n    # Face forward again\n    turn_left()\n    basic.pause(200)\n\n    # Maze decision logic (left-hand rule)\n    if left > 5:\n        turn_left()\n        move_forward()\n        path.append(2)  # 2 = left\n    elif front > 5:\n        move_forward()\n        path.append(1)  # 1 = forward\n    elif right > 5:\n        turn_right()\n        move_forward()\n        path.append(3)  # 3 = right\n    else:\n        # Dead end: turn around and move\n        turn_around()\n        move_forward()\n        path.append(0)  # 0 = dead end backtrack\n","pxt.json":"{\n    \"name\": \"wall obstacle avoidance\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v2.1.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1744162538858,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","main.py":"# Enter the maze\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 14, CutebotProDistanceUnits.CM)\nbasic.pause(1000)\n\npath = []\nfirst_move_done = False  # flag to avoid turning into the wall\n\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 95)\n    basic.pause(300)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 95)\n    basic.pause(300)\n\ndef move_forward():\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 25, CutebotProDistanceUnits.CM)\n    basic.pause(300)\n\nwhile True:\n    if not first_move_done:\n        # Go forward once before beginning wall-following\n        move_forward()\n        path.append(1)\n        first_move_done = True\n        continue\n\n    # Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(200)\n\n    # Face forward again\n    turn_right()\n    front = check_distance()\n    basic.pause(200)\n\n    # Look right\n    turn_right()\n    right = check_distance()\n    basic.pause(200)\n\n    # Face forward again\n    turn_left()\n    basic.pause(200)\n\n    # Maze decision logic (left-hand rule)\n    if left > 10:\n        turn_left()\n        move_forward()\n        path.append(2)  # 2 = left\n    elif front > 10:\n        move_forward()\n        path.append(1)  # 1 = forward\n    elif right > 10:\n        turn_right()\n        move_forward()\n        path.append(3)  # 3 = right\n\nprint(path)","pxt.json":"{\n    \"name\": \"wall obstacle avoidance\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v2.1.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1744165222514,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","main.py":"from cutebot import *\nimport basic, serial\n\n# Enter the maze\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 14, CutebotProDistanceUnits.CM)\nbasic.pause(1000)\n\npath = []\nfirst_move_done = False\n\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef move_forward():\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 25, CutebotProDistanceUnits.CM)\n    basic.pause(100)\n\nwhile True:\n    if not first_move_done:\n        move_forward()\n        path.append(1)\n        first_move_done = True\n        continue\n\n    # Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(100)\n\n    # Face forward again\n    turn_right()\n    front = check_distance()\n    basic.pause(100)\n\n    # Stop if maze ends (huge opening ahead)\n    if front > 100:\n        serial.write_line(\"Maze end detected! Stopping.\")\n        break\n\n    # Look right\n    turn_right()\n    right = check_distance()\n    basic.pause(100)\n\n    # Face forward again\n    turn_left()\n    basic.pause(100)\n\n    # Maze logic\n    if left > 15:\n        turn_left()\n        move_forward()\n        path.append(2)\n    elif front > 15:\n        move_forward()\n        path.append(1)\n    elif right > 15:\n        turn_right()\n        move_forward()\n        path.append(3)\n    else:\n        # Dead end\n        turn_left()\n        turn_left()\n        move_forward()\n        path.append(0)\n\n# Output path after reaching end\nserial.write_line(\"Maze path taken:\")\nfor step in path:\n    if step == 1:\n        serial.write_line(\"Forward\")\n    elif step == 2:\n        serial.write_line(\"Left\")\n    elif step == 3:\n        serial.write_line(\"Right\")\n    elif step == 0:\n        serial.write_line(\"Backtrack\")\n","pxt.json":"{\n    \"name\": \"wall obstacle avoidance\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v2.1.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1744216383698,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","main.py":"# Enter the maze\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 14, CutebotProDistanceUnits.CM)\nbasic.pause(1000)\n\npath = []\nfirst_move_done = False\n\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef move_forward():\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 25, CutebotProDistanceUnits.CM)\n    basic.pause(100)\n\nwhile True:\n    if not first_move_done:\n        move_forward()\n        path.append(1)\n        first_move_done = True\n        continue\n\n    # Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(100)\n\n    # Face forward again\n    turn_right()\n    front = check_distance()\n    basic.pause(100)\n\n    # Stop if maze ends (huge opening ahead)\n    if front > 100:\n        serial.write_line(\"Maze end detected! Stopping.\")\n        break\n\n    # Look right\n    turn_right()\n    right = check_distance()\n    basic.pause(100)\n\n    # Face forward again\n    turn_left()\n    basic.pause(100)\n\n    # Maze logic\n    if left > 15:\n        turn_left()\n        move_forward()\n        path.append(2)\n    elif front > 15:\n        move_forward()\n        path.append(1)\n    elif right > 15:\n        turn_right()\n        move_forward()\n        path.append(3)\n    else:\n        # Dead end\n        turn_left()\n        turn_left()\n        move_forward()\n        path.append(0)\n\n# Output path after reaching end\nserial.write_line(\"Maze path taken:\")\nfor step in path:\n    if step == 1:\n        serial.write_line(\"Forward\")\n    elif step == 2:\n        serial.write_line(\"Left\")\n    elif step == 3:\n        serial.write_line(\"Right\")\n    elif step == 0:\n        serial.write_line(\"Backtrack\")\n","pxt.json":"{\n    \"name\": \"wall obstacle avoidance\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v2.1.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1744218255419,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","main.py":"# Enter the maze (get to the middle of the grid)\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 14, CutebotProDistanceUnits.CM)\nbasic.pause(1000)\n\npath = []\nfirst_move_done = False\n\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef move_forward():\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 25, CutebotProDistanceUnits.CM)\n    basic.pause(100)\n\nwhile True:\n    if not first_move_done:\n        move_forward()\n        path.append(1)\n        first_move_done = True\n        continue\n\n    #Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(100)\n\n    #Face forward again\n    turn_right()\n    front = check_distance()\n    basic.pause(100)\n\n    #Stop if maze ends (huge opening ahead)\n    if front > 100:\n        serial.write_line(\"Maze end detected! Stopping.\")\n        break\n\n    #Look right\n    turn_right()\n    right = check_distance()\n    basic.pause(100)\n\n    #Face forward again\n    turn_left()\n    basic.pause(100)\n\n    #Maze logic\n    if left > 15:\n        turn_left()\n        move_forward()\n        path.append(2)\n    elif front > 15:\n        move_forward()\n        path.append(1)\n    elif right > 15:\n        turn_right()\n        move_forward()\n        path.append(3)\n    else:\n        #Dead end  - have not tested it out yet\n        turn_left()\n        turn_left()\n        move_forward()\n        path.append(0)\n\n#Output path after reaching end\nserial.write_line(\"Maze path taken:\")\nfor step in path:\n    if step == 1:\n        serial.write_line(\"Forward\")\n    elif step == 2:\n        serial.write_line(\"Left\")\n    elif step == 3:\n        serial.write_line(\"Right\")\n    elif step == 0:\n        serial.write_line(\"Backtrack\")\n","pxt.json":"{\n    \"name\": \"wall obstacle avoidance\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v2.1.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}}],"shares":[],"lastSaveTime":1744219542950}